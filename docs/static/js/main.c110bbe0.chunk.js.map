{"version":3,"sources":["root.csv","logo.svg","components/main.js","App.js","todo.js","serviceWorker.js","index.js"],"names":["module","exports","Main","class","this","props","english","meaning","React","Component","d3","databook","console","log","pagebook","then","row","i","length","push","catch","err","App","countRow","state","mdfd_data","fixed_data","setState","view_data","metRoop","playing","timer","setInterval","bpm","doNothing","page","data","hoge_data","setPage","root","event","inputValue","Number","target","value","onClick","border","rules","map","index","array","minusPage","plusPage","onSubmit","handleSubmit","type","onChange","handleEmailChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c110bbe0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/root.c7de0948.csv\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport default class Main extends React.Component {\n  render() {\n    return (\n      <tr>\n        <td class='english'>{this.props.english}</td>\n        <td class='meaning'><p class='overflow'>{this.props.meaning}</p></td>\n      </tr>\n  );\n  }\n}\n","//! ページリープ機能\n//! メトロノーム機能\n//! 表示項目にnumを追加\n//! データをgogengo!rootにしてみる\n//! ビジュアル\n//∆ ファイルのロードを一番上の変数でいじくれるようにする⬅︎ムリ\n\n\n//∆ ページめくる時にrowリセット\n//∆ レベルごとに色が変わる仕組み\n//∆ ビート打つたびになんかかっこいいエフェクト追加したい\n//∆ カラー変更ボタン\n//∆ 間違えた時用のrowreset\n//∆ なんか数字入力するとこがよくわからんくなるバグの修正\n//∆ メトロノーム停止機能\n//∆ 全部意味が表示される時のインターバル\n//∆ メトロノーム速度選択機能\n//∆ メトロノーム音声\n//∆ メトロノームα波とかに変える\n//∆ ショートカットキー追加\n//∆ csvファイル選択機能\n//∆ ラストデータのバグに対応するために修正\n//∆ 次ページ、全ページのプレビュー機能\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/main'\n\n// import Footer from './components/footer'\n// import Prime from './components/prime.js'\nimport * as d3 from 'd3';\nimport databook from './root.csv';//§\n\n\nd3.csv(databook, function(databook) { console.log(''); });\nvar pagebook = []\nd3.csv(databook).then(function(databook) {\n  var row = [];\n  for(let i = 0; i < databook.length; i++){\n    row.push(databook[i])\n    if(row.length == 10){\n      pagebook.push(row);\n      row = []\n      // console.log(row);\n    }\n    if(i == databook.length - 1){\n      // console.log(row);\n      pagebook.push(row);\n    }\n  }\n  console.log(pagebook[89]);\n  console.log(pagebook[90]);\n}).catch(function(err) {\n  throw err;\n})\n\n\n\n// sleep(5, function () {\n//\n//     console.log('5秒経過しました！');\n//\n// });\n\nclass App extends React.Component {\n  constructor(props) {\n    // var fixed_data = [[0,'zero'],[1,'ichi'],[2,'zero'],[3,'ichi'],[4,'zero'],[5,'ichi'],[6,'zero'],[7,'ichi'],[8,'zero'],[9,'ichi']];\n    // var view_data =  [[0,'zero'],[1,'ichi'],[2,'zero'],[3,'ichi'],[4,'zero'],[5,'ichi'],[6,'zero'],[7,'ichi'],[8,'zero'],[9,'ichi']];\n    var fixed_data = [];\n    var view_data =  [];\n    var hoge_data = [[],[]];\n    super(props);\n    this.state = ({\n      fixed_data: fixed_data,\n      view_data: view_data,\n      row: 0,\n      page: 0,\n      data: [],\n      databook: databook,\n      page: 0,\n      playing: false,\n      bpm: 70,\n      // hoge_data: ['default','','','','','','','','',''],\n    })\n    // this.getData = this.getData.bind(this);\n  }\n  popCsv() {\n    // for(var i = 0; i < this.state.pagebook.length; i++){\n    //   console.log(this.state.pagebook[i]);\n    // }\n    console.log(this.state.hoge_data)\n  }\n  // ーーーーーーーーーーーーーーーーーーーー\n  countRow = () => {\n    //\n    if(this.state.row <= 10){\n      // activate_view_gradually\n      var mdfd_data = []\n\n      // activated\n      for(var i = 0; i < this.state.row; i++){\n        mdfd_data.push(this.state.fixed_data[i] )\n      }\n\n      // hidden\n      for(var i = this.state.row;i <= 10; i++){\n        if(i != 10){\n          mdfd_data.push([ this.state.fixed_data[i][0],'--------------------' ])\n        }\n      }\n\n      // indert mdfd_data\n      this.setState({view_data: mdfd_data})\n\n      this.setState({row: this.state.row + 1} )\n    }else{\n      // Undo\n      // var fixed_data = [[0,'zero'],[1,'ichi']];\n\n      this.setState({view_data: this.state.fixed_data})\n      this.setState({row: 0})\n    }\n  }\n  plusPage() {\n    // ∆ラストのページがうまくいかない\n    if(this.state.page < pagebook.length - 2){\n      this.setState({page: this.state.page + 1})\n      this.setPage(this.state.page)\n    }\n  }\n  minusPage() {\n    if(this.state.page > 0){\n      this.setState({page: this.state.page - 1})\n      this.setPage(this.state.page)\n    }\n  }\n  setPage(page){\n    // var pagebook = this.getPagebook()\n    // var page = this.state.page\n    // this.setState({hoge_data: pagebook[page]})\n    var hoge_data = []\n    for(var i = 0; i < pagebook[page].length; i++){\n      //∆ var num = pagebook[page][i]['num']\n      console.log(pagebook[page][i])\n      var root = pagebook[page][i]['front']\n      console.log(root);\n      var meaning = pagebook[page][i]['back']\n      hoge_data.push([root,meaning])\n      //∆ hoge_data.push([num,root,meaning])\n    }\n    this.setState({fixed_data: hoge_data})\n  }\n  handleEmailChange(event) {\n    const inputValue = Number(event.target.value);\n    this.setState({page: inputValue})\n  }\n\n  // ーーーーーーーーーーmetronomeーーーーーーーーーー\n  // 1つの関数をゆっくり繰り返す\n  // loopSlowly(func, loop, interval) {\n  //   for(let i = 0; i < loop; i++) {\n  //     setTimeout(func, i * interval);\n  //   }\n  // }\n  //\n  // // ループさせたい処理を用意する\n  // countRowRoop = () => {\n  //   this.countRow()\n  // };\n  //\n  // setInterval( this.countRow, 1000);\n  metRoop = () => {\n    if(!this.state.playing){\n      this.timer = setInterval(this.countRow,(60 / this.state.bpm) * 1000);\n\n      this.setState({playing: true})\n    }\n  }\n  doNothing = () => {\n    console.log('nothing');\n    this.setState({row: this.state.row})\n  }\n\n  // startStop = () => {\n  //   if(this.state.playing) {\n  //     // Stop the timer\n  //     clearInterval(this.timer);\n  //     this.setState({\n  //       playing: false\n  //     });\n  //   } else {\n  //     // Start a timer with the current BPM\n  //     this.timer = setInterval(this.playClick, (60 / this.state.bpm) * 1000);\n  //     this.setState({\n  //       count: 0,\n  //       playing: true\n  //       // Play a click \"immediately\" (after setState finishes)\n  //     }, this.playClick);\n  //   }\n  // }\n\n\n  render(){\n    return (\n      <div>\n\n        {/*\n        <button onClick={() => {this.countRow()}}>row+</button>\n        <button onClick={ () => {this.popCsv()}} >Hide!</button>\n        */}\n\n        <button class='btn-circle-border-double' onClick={ () => {this.metRoop()}}>MetRoop</button>\n\n\n\n        <table border='2' rules='all'>\n          <tbody>\n            {this.state.view_data.map(( value, index, array) => {\n              return (\n                <Main\n                  english={value[0]}\n                  meaning={value[1]}\n                />\n              )\n            })}\n            <tr>\n              <td class='english'>\n\n              </td>\n              <td class='meaning'>\n                <button class='container' onClick={ () => {this.minusPage()}}>−</button>\n                <button class='container' onClick={ () => {this.plusPage()}}>+</button>\n\n              </td>\n\n            </tr>\n          </tbody>\n        </table>\n        <form onSubmit={() => {this.handleSubmit()}}>\n\n          {/*\n            inputタグを追加してください\n            <p>飛びたいページ<br></br>０から始まる</p>\n          */}\n          <input\n            type='number'\n            value={this.state.page}\n            onChange={(event) => {this.handleEmailChange(event)}}\n          />\n          {/* 送信ボタンを追加してください */}\n        </form>\n        <button class='setPage container' onClick={ () => {this.setPage(this.state.page)}}>setPage</button>\n\n        <h3>{'Page:' + this.state.page}</h3>\n        {/*\n        <h3>{'Now:' + (this.state.row - 1)}</h3>\n        <h3>{'Next:' + this.state.row}</h3>\n        */}\n        <h2 class='bpm'>{'Bpm:' + this.state.bpm}</h2>\n\n        <h3>{this.state.hoge_data}</h3>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","import React, { Component } from 'react';\n\nexport default class Todo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      name: ''\n    };\n  }\n\n  onInput = (e) => {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  addTodo = () => {\n    const { todos, name } = this.state;\n    this.setState({\n      todos: [...todos, name],\n    });\n  }\n\n\n  removeTodo = (index) => {\n    const { todos, name } = this.state;\n    this.setState({\n      todos: [...todos.slice(0, index), ...todos.slice(index + 1)]\n    });\n  }\n\n  render() {\n    const { todos } = this.state;\n    return (\n    <div>\n      <input type=\"text\" placeholder='タスクを入力する' onInput={this.onInput} />\n      <button onClick={\n        this.addTodo} >登録</button>\n      <ul>\n        {todos.map((todo, index) => <li key={index}>\n          {todo}\n          <button onClick={() => { this.removeTodo(index) }}>削除</button>\n        </li>)}\n      </ul>\n    </div>);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './components/sheet.min.css'\nimport App from './App';\nimport Todo from './todo';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}